#include "stringbuilder.h"

UTIL.Base64 = {
    char64 : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    encode : function(s) {
	var len = s.length;
	var r = s.length % 3;
//	var ret = new Array(len + (!!r ? 1 : 0));
	var c1, c2, c3;
	var m = UTIL.Base64.char64;
	BUF_INIT();

	for (var i = 0; i+3 < len; i+=3) {
	    c1 = s.charCodeAt(i);
	    c2 = s.charCodeAt(i+1);
	    c3 = s.charCodeAt(i+2);

	    BUF_PUTCHAR(m.charCodeAt(c1>>2));
	    BUF_PUTCHAR(m.charCodeAt((c1&3)<<4 | c2>>4));
	    BUF_PUTCHAR(m.charCodeAt((c2&15)<<2 | c3>>6));
	    BUF_PUTCHAR(m.charCodeAt(c3&63));
	    /*
	    ret[i] = String.fromCharCode(m.charCodeAt(c1>>2),
					 m.charCodeAt((c1&3)<<4 | c2>>4),
					 m.charCodeAt((c2&15)<<2 | c3 >> 6),
					 m.charCodeAt(c3&63));
	    */
	    BUF_CHECK();
	}

	c1 = s.charCodeAt(i++);

	if (r == 2) {
	    c2 = s.charCodeAt(i++);

	    BUF_PUTCHAR(m.charCodeAt(c1>>2));
	    BUF_PUTCHAR(m.charCodeAt((c1&3<<4)| c2 >> 4));
	    BUF_PUTCHAR(m.charCodeAt(c2&15)<<2);
	    BUF_PUTCHAR(61);
	    //ret[ret.length-1] = String.fromCharCode(m.charCodeAt(c1>>2), m.charCodeAt((c1&3<<4)| c2 >> 4), m.charCodeAt(c2&15)<<2) + "=";
	} else if (r == 1) {
	    BUF_PUTCHAR(m.charCodeAt(c1>>2));
	    BUF_PUTCHAR(m.charCodeAt(c1&3<<4));
	    BUF_PUTCHAR(61);
	    BUF_PUTCHAR(61);
	    //ret[ret.length-1] = String.fromCharCode(m.charCodeAt(c1>>2), m.charCodeAt(c1&3<<4)) + "==";
	}

	BUF_FINISH();
	return BUF_GET();
	//return ret.join("");
    },
    deco : function(i) {
	i = UTIL.Base64.deco64[i];
	if (!i) throw("holy cow!\n");
	return i - 1;
    },
    // TODO: this should maybe collect the integers and do one
    // call to String.fromCharCode at the end.
    decode : function(b) {
	BUF_INIT();
	b = b.replace(/\n|\r/g, "");
	var len = b.length;
	var deco = UTIL.Base64.deco64;
	var c1,c2,c3,c4,i;
#define	DECO(x)	(deco.charCodeAt(x))

	for (i = 0; i+4 < len; i+=4) {
	    c1 = b.charCodeAt(i);
	    c2 = b.charCodeAt(i+1);
	    c3 = b.charCodeAt(i+2);
	    c4 = b.charCodeAt(i+3);
	    BUF_PUTCHAR(DECO(c1)<<2 | (DECO(c2)>>4));
	    BUF_PUTCHAR(((DECO(c2) << 4) & 0xff) | (DECO(c3) >> 2));
	    BUF_PUTCHAR(((DECO(c3) << 6) & 0xc0) | DECO(c4));
	    BUF_CHECK();
	}

	c1 = b.charCodeAt(i++);
	c2 = b.charCodeAt(i++);
	BUF_PUTCHAR(DECO(c1)<<2 | (DECO(c2)>>4));
	c3 = b.charCodeAt(i++);
	if (c3 != 61) {
	    BUF_PUTCHAR(((DECO(c2) << 4) & 0xff) | (DECO(c3) >> 2));
	    c4 = b.charCodeAt(i++);
	    if (c4 != 61)
		BUF_PUTCHAR(((DECO(c3) << 6) & 0xc0) | DECO(c4));
	}

	BUF_FINISH();
	return BUF_GET();
    }
};
UTIL.Base64.deco64 = (function() {
	var x = new Array(256); 
	var i;

	for (i = 0; i < 64; ++i) {
	    x[UTIL.Base64.char64.charCodeAt(i)] = i;
	}

	x["=".charCodeAt(0)] = 0;

	for (i = 0; i < x.length; i++) if (!x[i]) x[i] = 0;

	return String.fromCharCode.apply(String, x);
   })();
